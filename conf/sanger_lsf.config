process {
    withName: mSigHdp {
        container = '/lustre/scratch125/casm/teams/team267/projects/DockerImages/msighdp_amd64_0.0.2.sif'
    }
    withName: SigProfilerAssignment {
        container = '/lustre/scratch125/casm/teams/team267/projects/DockerImages/sigprofilerassignment_amd64_0.0.1.sif'
    }
    withName: SigProfilerPlotting {
        container = '/lustre/scratch125/casm/teams/team267/projects/DockerImages/sigprofiler_plotting_1.3.24.sif'
    }
}

docker.enabled = false
// singularity {
//     enabled = true
//     autoMounts = true
//    runOptions = '--cleanenv --no-home'
// }

process {
    resourceLimits = [
        memory: 2.9.TB,
        cpus: 256,
        time: 43200.min
        ]
//    memory = '100GB'
//    cpu = 20
//    time = '12h'
    executor = 'lsf'
    errorStrategy = { task.exitStatus in ((130..145) + 104 ) ? 'retry' : 'finish' }
    maxRetries = 5
    queue = {
        if ( task.time >= 15.day ) {
            if ( task.memory > 680.GB ) {
                error "There is no queue for jobs that need >680 GB and >15 days"
            } else {
                "basement"
            }
        } else if ( task.memory > 720.GB ) {
            "teramem"
        } else if ( task.memory > 350.GB ) {
            "hugemem"
        } else if ( task.time > 7.day ) {
            "basement"
        } else if ( task.time > 2.day ) {
            "week"
        } else if ( task.time > 12.hour ) {
            "long"
        } else if ( task.time > 1.min ) {
            "normal"
        } else {
            "small"
        }
    }
    withName: mSigHdp {
        cpus   = { 20                   }
        memory = { task.attempt > 1 ? task.previousTrace.memory * 2 : (50.GB)  }
        time   = { task.attempt == 1 ? 7.day : 30.day}
    }
    withName: SigProfilerAssignment {
        cpus   = { 1                   }
        memory = { task.attempt > 1 ? task.previousTrace.memory * 2 : (6.GB)  }
        time   = { task.attempt == 1 ? 7.day : 30.day}
    }
    withName: SigProfilerPlotting {
        cpus   = { 1                   }
        memory = { task.attempt > 1 ? task.previousTrace.memory * 2 : (6.GB)  }
        time   = { task.attempt == 1 ? 7.day : 30.day}
    }
}

executor {
    name = 'lsf'
    perJobMemLimit = true
    poolSize = 4
    submitRateLimit = '10 sec'
    killBatchSize = 50
    queueSize = 4000
}